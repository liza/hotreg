<?php

/**
 * @file
 * Manages availability for Bookable Units and displaying dates on the jquery FullCalendar
 * plugin
 */

/**
 * The default path to the FullCalendar plugin.
 */
define('ROOMS_FC_PATH', 'sites/all/libraries/fullcalendar/fullcalendar');

/**
 * The minimum supported version of the FullCalendar plugin.
 */
define('ROOMS_FC_MIN_PLUGIN_VERSION', '1.4.10');

define('ROOMS_AVAILABILITY_ADMIN_STYLE', 1);
define('ROOMS_AVAILABILITY_GENERIC_STYLE', 2);


/**
 * Implements hook_library().
 */
function rooms_availability_library() {
  $libraries['rooms_fullcalendar'] = array(
    'title' => 'Rooms FullCalendar',
    'website' => 'http://arshaw.com/fullcalendar',
    'version' => ROOMS_FC_MIN_PLUGIN_VERSION,
    'js' => array(
      rooms_availability_fullcalendar_get_js_path() => array(),
      variable_get('rooms_fc_path', ROOMS_FC_PATH) . '/gcal.js' => array(),
    ),
    'css' => array(
      variable_get('rooms_fc_path', ROOMS_FC_PATH) . '/fullcalendar.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      drupal_get_path('module', 'rooms_availability') . '/css/fullcalendar.theme.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'dependencies' => array(
      array('system', 'ui.draggable'),
      array('system', 'ui.droppable'),
      array('system', 'ui.resizable'),
      array('system', 'effects.highlight'),
    ),
  );
  return $libraries;
}


/**
 * Implements hook_permission().
 */
function rooms_availability_permission() {
  $permissions = array(
    'manage booking unit availability' => array(
      'title' => t('Manage Booking Unit Availability'),
      'description' => t('Allows users to manage availability settings for Rooms'),
      'restrict access' => TRUE,
    ),
    'view availability information' => array(
      'title' => t('View availability information'),
      'description' => t('Allow users to view availability info (especially via availability reference field)'),
    )
  );
  return $permissions;
}


/**
 * Implements hook_menu().
 */
function rooms_availability_menu() {
  $items  =  array();
  
  $items['admin/rooms/units/unit/%availability_unit/availability'] = array(
    'title' => 'Manage Availability',
    'page callback' =>  'rooms_availability_page',
    'page arguments' => array(4, 6, 7),
    'access callback' => 'rooms_availability_admin_access',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => '20',
  );
  
  $items['rooms/units/unit/%availability_unit/availability/json/%/%'] = array(
    'title' =>  'Availability Event',
    'page callback' => 'rooms_availability_event',
    'page arguments' => array(3, 6, 7, 8, 9, 10, 11, 12),
    'access callback' => 'rooms_availability_access',
    'access arguments' => array(4),
    'type' => MENU_CALLBACK,
    'weight' => 30,
  );

  $items['admin/rooms/units/unit/%availability_unit/event'] = array(
    'title' => 'Event Management',
    'page callback' =>  'rooms_availability_event_manager_page',
    'page arguments' => array(4),
    'access callback' => 'rooms_availability_access',
    'access arguments' => array(4),
    'type' => MENU_CALLBACK,
    'weight' => 30,
  );

  return $items;
}



/**
 * Menu load for units - calls the actuall rooms_unit_load implemented in rooms_unit.module
 */
function availability_unit_load($unit_id) {
  $unit = rooms_unit_load($unit_id);
  return $unit;
}



/**
 * Room availability admin access callback
 * @todo check unauthorised access for calendar js
 */ 
function rooms_availability_admin_access($rooms_unit) {
  if (user_access('manage booking unit availability')) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Room availability access callback
 */ 
function rooms_availability_access($rooms_unit) {
  if (user_access('view availability information')) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Callback for admin/rooms/units/unit/%unit/availability - builds availability
 * page by adding calendar and pulling events from availability table.
 * 
 */
function rooms_availability_page(RoomsUnit $rooms_unit, $year='', $month='') {

  // Basic check to avoid any uggliness
  $year = check_plain($year);
  $month = check_plain($month);
  
  // If year is not set then give it the current date
  $year = ($year == '') ? date('Y', time()) : $year;
  $month = ($month == '') ? date('n', time()) : $month;

  // Add all the stuff we will need to show the FullCalendar  
  drupal_add_library('rooms_availability', 'rooms_fullcalendar');
  drupal_add_js(drupal_get_path('module', 'rooms_availability') . '/js/rooms_availability.js');
  drupal_add_css(drupal_get_path('module', 'rooms_availability') . '/css/fullcalendar.theme.css');
  drupal_add_css(drupal_get_path('module', 'rooms_availability') . '/css/rooms_availability.css');
  
  // Inject settings in javascript that we will use
  drupal_add_js(array('roomsAvailability' => array('roomID' => $rooms_unit->unit_id)), 'setting');
  drupal_add_js(array('roomsAvailability' => array('currentMonth' => $month)), 'setting');
  drupal_add_js(array('roomsAvailability' => array('currentYear' => $year)), 'setting');
  

  // Calculate forward and back dates for our 3-month view calendar and create links
  $date1 = new DateTime("$year-$month-1");
  $date2 = new DateTime("$year-$month-1");
  $date_current = new DateTime("now");


  $forward = $date1->add(new DateInterval('P3M'));
  $forward_path = 'admin/rooms/units/unit/' . $rooms_unit->unit_id . '/availability/' . $forward->format('Y') . '/' . $forward->format('n');
  $forward_link = l(t('Forward'), $forward_path);

  $backward = $date2->sub(new DateInterval('P3M'));
  $backward_path = 'admin/rooms/units/unit/' . $rooms_unit->unit_id . '/availability/' . $backward->format('Y') . '/' . $backward->format('n');
  $backward_link = l(t('Back'), $backward_path);
  
  $current_path = 'admin/rooms/units/unit/' . $rooms_unit->unit_id . '/availability/' . $date_current->format('Y') . '/' . $date_current->format('n');
  $current_link = l(t('Current'), $current_path);
  
  // The content to theme
  $content = array();

  $content['title'] = array(
    '#prefix' => '<div class="availability-title">',
    '#markup' => '<h2>' . t('@name Availability View', array('@name' => $rooms_unit->name)) . '</h2>',
    '#suffix' => '</div>'
  );
  $content['room_name'] = $rooms_unit->name;
  $content['type'] = $rooms_unit->type;
  $content['update_form'] = drupal_get_form('update_availability_calendar_form', $rooms_unit->unit_id, $year, $month);
  $content['start_year'] = $year;
  $content['start_month'] = $month;
  $content['forward_link'] = $forward_link;
  $content['backward_link'] = $backward_link;
  $content['current_link'] = $current_link;

  $content['update_form_into'] = array(
    '#prefix' => '<div class="availability-update">',
    '#markup' => '<h2>' . t('Update Room Availability') . '</h2>',
    '#suffix' => '</div>'
  );
  
  // Send everything for theming
  $output = theme('rooms_availability', $content);

  return $output;  
}


/**
 * A basic form that allows us to update the state of the calendar
 */
function update_availability_calendar_form($form, &$form_state, $unit_id, $year, $month) {
  
  $form['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit_id,
  );
  
  $form['rooms_date_range'] = rooms_date_range_fields();
  // Unset a js setting
  drupal_add_js(array('rooms' => array('roomsBookingStartDay' => 0)), 'setting');
  
  $form['unit_state'] = array(
    '#type' => 'select',
    '#title' => t('Bookable Unit State'),
    '#options' => array(
      ROOMS_NOT_AVAILABLE => 'Unavailable',
      ROOMS_AVAILABLE => 'Available',
      ROOMS_ON_REQUEST => 'Available on Request',
      ROOMS_ANON_BOOKED => 'Anonymous Booking'
    ),
    '#description' => t('Choose what state to put the unit in for the dates chosen above'),
  );
  
  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );
  
  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Room Availability'),
    '#submit' => $submit + array('update_availability_calendar_form_submit'),
  );
  
  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'update_availability_calendar_form_validate';
  
  
  return $form;
}


function update_availability_calendar_form_validate(&$form, &$form_state) {
  // Check date validity
  $date1 = new DateTime($form_state['values']['rooms_start_date']);
  $date2 = new DateTime($form_state['values']['rooms_end_date']);
  $diff = $date1->diff($date2);
  // If date1 > date2
  if ($diff->invert) {
    form_set_error('date_range', t('End date must be after start date'));
  }
}


/**
 *@todo Need to figure out what to do when we cancel an existing booking
 */

function update_availability_calendar_form_submit(&$form, &$form_state) {
  
  $start_date = new DateTime($form_state['values']['rooms_start_date']);
  $end_date = new DateTime($form_state['values']['rooms_end_date']);
  $event_id = $form_state['values']['unit_state'];
  
  $unit_id = $form_state['values']['unit_id'];
  
  // Create a new Booking Event
  $be = new BookingEvent($unit_id, $event_id, $start_date, $end_date);
  $events = array($be);
  $rc = new UnitCalendar($unit_id);
  $response = $rc->updateCalendar($events);
  if ($response[$event_id] == ROOMS_BLOCKED) {
    drupal_set_message(t('Could not update calendar because a locked event is blocking the update - you need to unlock any locked events in that period'));
  }
  elseif ($response[$event_id] == ROOMS_UPDATED) {
    drupal_set_message(t('Calendar Updated'));
  }
}



/** 
 * Creates the necessary json for the date range provided - needs at least start year and month at which point it will
 * return the entire month.
 */
function rooms_availability_event($unit, $start_year = '', $start_month = '', $start_day = '', $end_year = '', $end_month = '', $end_day = '', $event_style = ROOMS_AVAILABILITY_ADMIN_STYLE) {
  $start_year = (int)$start_year;
  $start_month = (int)$start_month;
  $start_day = (int)$start_day;
  
  $end_year = (int)$end_year;
  $end_month = (int)$end_month;
  $end_day = (int)$end_day;
  
  $event_style = (int)$event_style;
  
  $eom = rooms_end_of_month_dates($start_year);
    
  if (($start_year == 0) || ($start_month == 0)) {
    echo drupal_json_encode('missing basic info');
    return;
  }
  elseif ($start_day == 0) {
    $start_date = new DateTime("$start_year-$start_month-1");
    $end_day = $eom[$start_month];
    $end_date = new DateTime("$start_year-$start_month-$end_day");
  }
  elseif ($start_day != 0 && $end_year == 0) {
    $start_date = new DateTime("$start_year-$start_month-$start_day");
    $end_date = new DateTime("$start_year-$start_month-15");
    $end_date->add(new DateInterval('P1M'));
    $end_year = $end_date->format('Y');
    $end_month = $end_date->format('n');
    $end_day = $eom[$end_date->format('n')];
    $end_date = new DateTime("$end_year-$end_month-$end_day");
  }
  else{
    $start_date = new DateTime("$start_year-$start_month-$start_day");
    $end_date = new DateTime("$end_year-$end_month-$end_day");    
  }

  $rc = new UnitCalendar($unit->unit_id, $unit->default_state);
  
  $events = $rc->getEvents($start_date, $end_date);
  $json_events  = array();
  
  foreach ($events as $event) {
    $json_events[] = $event->formatJson($event_style);
  }
 
  echo drupal_json_encode($json_events);
  
}


/**
 * The EventManager page shows when clicking on an event in the availability calendar - will allow a user to manipulate
 * that event.
 */
function rooms_availability_event_manager_page($unit, $event_id = NULL, $start_date = 0, $end_date = 0) {
  
  // If any info missing we cannot load the event
  if ($event_id == NULL || $start_date == 0 || $end_date == 0) {
    return 'Unable to load event';
  }
    
  $state_options = array(
    ROOMS_NOT_AVAILABLE => 'Unavailable',
    ROOMS_AVAILABLE => 'Available',
    ROOMS_ON_REQUEST => 'On Request',
    ROOMS_ANON_BOOKED => 'Anonymous Booking',
  );
  
  // Basic check to avoid damage from dirty input
  $event_id = check_plain($event_id);
  $start_date = check_plain($start_date);
  $end_date = check_plain($end_date);

  $booked = FALSE;
  if ($event_id > 10) {
    $booked = TRUE;
  }
  
  $sd = new DateTime();
  $sd->setTimezone(new DateTimeZone('UTC'))->setTimestamp($start_date);
  
  $ed = new DateTime();
  $ed->setTimezone(new DateTimeZone('UTC'))->setTimestamp($end_date);

  if (!$booked) {
    $content['event_title'] = array(
      '#prefix' => '<h2>',
      '#markup' => t('@room is @status', array('@room' => $unit->name, '@status' => $state_options[$event_id])),
      '#suffix' => '</h2>'
    );
  }
  else {
    $booking_id = rooms_availability_return_id($event_id);
    $booking = rooms_booking_load($booking_id);
    $output = t('@room is booked for @client', array('@room' => $unit->name, '@client' => $booking->name));
    $output .= '<br/>';
    $booking_path = 'admin/rooms/bookings/booking/' . $booking->booking_id . '/edit';
    $booking_link = l(t('Edit Booking'), $booking_path);
    $output .= $booking_link;

    $content['event_title'] = array(
      '#prefix' => '<h2>',
      '#markup' => $output,
      '#suffix' => '</h2>'
    );    
  }
  $content['event_details'] = array(
    '#prefix' => '<div class="event-details">',
    '#markup' => t('Duration: @startdate to @enddate', array('@startdate' => $sd->format('Y-m-d'), '@enddate' => $ed->format('Y-m-d'))),
    '#suffix' => '</div>'
  );
  
  if (!$booked) {
    $content['event_manager_form'] = drupal_get_form('rooms_availability_event_manager_form', $unit->unit_id, $event_id, $start_date, $end_date);
  }
  
  $output = theme('rooms_event', $content);
  
  return $output;
}


/**
 * The Event Manager Form - will eventually change based on the type of event we are manipulating
 */
function rooms_availability_event_manager_form($form, $form_state, $unit_id, $event_id, $start_date, $end_date) {
  $form = array();
  
  $form['form_wrapper_top'] = array(
    '#type' => 'item',
    '#markup' => '',
    '#prefix' => '<div id="replace_textfield_div">',
  );

  
  $form['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit_id,
  );

  $form['event_id'] = array(
    '#type' => 'hidden',
    '#value' => $event_id,
  );
  
  $form['start_date'] = array(
    '#type' => 'hidden',
    '#value' => $start_date,
  );
  
  $form['end_date'] = array(
    '#type' => 'hidden',
    '#value' => $end_date,
  );
  
  $state_options = array(
    '-1' => 'Choose a new status',
    ROOMS_NOT_AVAILABLE => 'Unavailable',
    ROOMS_AVAILABLE => 'Available',
    ROOMS_ON_REQUEST => 'On Request',
    ROOMS_ANON_BOOKED => 'Anonymous Booking',
  );
  
  unset($state_options[$event_id]);
  
  $form['change_event_status'] = array(
    '#title' => t("Change the state for this event to:") . ' ',
    '#type' => 'select',
    '#options' => $state_options,
    '#default_value' => $event_id,
    '#ajax' => array(
      'callback' => 'rooms_availability_ajax_event_status_change',
      'wrapper' => 'replace_textfield_div',
     ),
  );

  // This entire form element will be replaced whenever 'changethis' is updated.
  $form['form_wrapper_bottom'] = array(
    '#type' => 'item',
    '#markup' => '',
    '#suffix' => '</div>',
  );

  return $form;

}

/**
 * The callback for the change_event_status widget of the event manager form
 */
function rooms_availability_ajax_event_status_change($form, $form_state) {
  
  $unit_id = $form_state['values']['unit_id'];
  $event_id = $form_state['values']['event_id'];
  $start_time = $form_state['values']['start_date'];
  $end_time = $form_state['values']['end_date'];
  
  $new_event_id = $form_state['values']['change_event_status'];
  
  // If we have a new event id go ahead and update event
  if (($event_id != $new_event_id) && $new_event_id != -1) {
    
    $start_date = new DateTime();
    $start_date->setTimestamp($start_time);
    
    $end_date = new DateTime();
    $end_date->setTimestamp($end_time);  
    
    $event = new BookingEvent($unit_id, $new_event_id, $start_date, $end_date);
    $uc = new UnitCalendar($unit_id);
    $responses = $uc->updateCalendar(array($event));
    
    $form['form_wrapper_bottom']['#markup'] = 'Original Event id is:' . $event_id . ' New Event id is:' . $new_event_id;
    
  }
  
  return $form;
}


/**
 * Implement hook_theme().
 */
function rooms_availability_theme() {
  return array(
    'rooms_availability' => array(
      'template' => 'rooms_availability'
    ),
    'rooms_event' => array(
      'template' => 'rooms_event'
    )

  );
}

/**
 * Sets event ids
 *
 * @todo - Make this depend on a paramenter
 */
function rooms_availability_assign_id($id) {
  // Add eleven for now - this allows for 10 states that do not
  // refer to a specific booking
  $id = $id + 11;
  return $id;
}


/**
 * Returns the valid booking id
 */
function rooms_availability_return_id($id) {
  $id = $id - 11;
  
  return $id;
}

/**
 * Returns the path to the FullCalendar plugin.
 */
function rooms_availability_fullcalendar_get_js_path() {
  $fullcalendar_file = array('none' => 'fullcalendar.js', 'min' => 'fullcalendar.min.js');
  return variable_get('rooms_ROOMS_FC_PATH', ROOMS_FC_PATH) . '/' . $fullcalendar_file[variable_get('rooms_fullcalendar_compression_type', 'min')];
}

/**
 * Implements hook_colorbox_settings_alter
 *
 * @todo Figure out if this is the right way to get the settings we need
 */
function rooms_availability_colorbox_settings_alter(&$settings, &$style) {
}