<?php

/**
 * @file
 * API functions to manipulate messages.
 */

/**
 * Define the name of the message realm field.
 */
define('MESSAGE_FIELD_MESSAGE_TEXT', 'message_text');

/**
 * The maximal amount of messages to be purged upon hook_cron()
 */
define('MESSAGE_PURGE_LIMIT', 100);

/**
 * Implementation of hook_views_api().
 */
function message_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'message') . '/includes',
  );
}

 /**
 * Implements hook_ctools_plugin_directory().
 */
function message_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'ctools/' . $plugin;
  }
}

/**
 * Implements hook_permission().
 */
function message_permission() {
  $permissions = array();
  $permissions['administer message types'] = array(
    'title' => t('Administer message types'),
    'description' => t('Administer message types that can be used to log an event.'),
  );
  $permissions['create messages'] = array(
    'title' => t('Create messages'),
    'description' => t('Log new messages.'),
  );
  return $permissions;
}

/**
 * Implements hook_entity_info().
 */
function message_entity_info() {
  $items['message_type_category'] = array(
    'label' => t('Message type category'),
    'controller class' => 'EntityAPIControllerExportable',
    'entity class' => 'MessageTypeCategory',
    'base table' => 'message_type_category',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'description',
      'name' => 'category',
    ),
    'exportable' => TRUE,
    'export' => array(
      'default hook' => 'default_message_type_category',
    ),
    'bundle of' => 'message_type',
    'module' => 'message',
    'access callback' => 'message_type_category_access',
    // We don't use entity API's admin UI.
  );

  $items['message_type'] = array(
    'label' => t('Message type'),
    'controller class' => 'EntityAPIControllerExportable',
    'entity class' => 'MessageType',
    'base table' => 'message_type',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'description',
      'name' => 'name',
      'bundle' => 'category',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'category',
    ),
    'exportable' => TRUE,
    'export' => array(
      'default hook' => 'default_message_type',
    ),
    'bundle of' => 'message',
    'module' => 'message',
    'access callback' => 'message_type_access',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/messages',
      'file' => 'message.admin.inc',
      'controller class' => 'MessageTypeUIController',
    ),
  );

  if (module_exists('locale')) {
    $items['message_type']['translation']['locale'] = TRUE;
  }

  // Add bundle info but bypass entity_load() as we cannot use it here.
  if (db_table_exists('message_type_category')) {
    $message_categories = db_select('message_type_category', 'mtc')
      ->fields('mtc')
      ->execute()
      ->fetchAllAssoc('category');

    foreach ($message_categories as $category_name => $category) {
      $items['message_type']['bundles'][$category_name] = array(
        //@todo do we need a short label too?
        'label' => $category->category,
      );
    }
  }

  $items['message'] = array(
    'label' => t('Message'),
    'controller class' => 'EntityAPIController',
    'entity class' => 'Message',
    'base table' => 'message',
    'fieldable' => TRUE,
    'access callback' => 'message_access',
    'entity keys' => array(
      'id' => 'mid',
      // The message has no label.
      'label' => FALSE,
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'name',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),
    'module' => 'message',
    'metadata controller class' => 'MessageMetadataController',
    'views controller class' => 'MessageViewsController',
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $message_types = db_select('message_type', 'mt')
    ->fields('mt')
    ->execute()
    ->fetchAllAssoc('name');

  foreach ($message_types as $type_name => $type) {
    $items['message']['bundles'][$type_name] = array(
      //@todo do we need a short label too?
      'label' => $type->name,
      'admin' => array(
        'path' => 'admin/structure/messages/manage/%message_type',
        'real path' => 'admin/structure/messages/manage/' . $type->name,
        'bundle argument' => 4,
        'access arguments' => array('administer messages'),
      ),
    );
  }

  return $items;
}

/**
 * Implements hook_menu().
 */
function message_menu() {
  $items = array();

  $items['admin/config/message'] = array(
    'title' => 'Message settings',
    'description' => 'Manage message purging upon cron.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('message_user_admin_settings'),
    'access arguments' => array('administer messages'),
    'file' => 'message.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_cron().
 *
 * Fetch all message types and purge old messages.
 */
function message_cron() {
  // The maximal amount of messages to purge per cron run.
  $purge_limit = variable_get('message_delete_cron_limit', MESSAGE_PURGE_LIMIT);
  // Messages to be deleted.
  $purge_messages = array();
  // Names of non global-purge-settings overriding message types.
  $no_override_type_names = array();
  // Message types that override global purge settings.
  $override_types = array();

  // Iterate all message types to distinguish between overriding and non-
  // overriding types.
  foreach (message_type_load() as $message_type) {
    if (empty($message_type->data['purge']['override'])) {
      $no_override_type_names[] = $message_type->name;
    }
    else {
      // For overriding types, store the type and not its name to later extract
      // the specific purge settings.
      $override_types[] = $message_type;
    }
  }

  // Gather purgeable messages of overriding types.
  foreach ($override_types as $message_type) {
    // Ignore message type with unchecked "Purge messages". Also make sure that
    // purging settings are present.
    if (empty($message_type->data['purge']) || empty($message_type->data['purge']['enabled'])) {
      continue;
    }

    $purge_messages += message_get_purgeable_by_type($purge_limit, $message_type->name, $message_type->data['purge']);
  }

  // Gather purgeable messages of non-overriding types according to global
  // settings.
  if (!empty($no_override_type_names)) {
    // Do nothing if purge isn't enabled.
    if (variable_get('message_purge_enable', FALSE)) {
      $purge_settings = array(
        'quota' => variable_get('message_purge_quota', NULL),
        'days' => variable_get('message_purge_days', NULL),
      );

      $purge_messages += message_get_purgeable_by_type($purge_limit, $no_override_type_names, $purge_settings);
    }
  }

  // Delete all gathered messages.
  if (!empty($purge_messages)) {
    message_delete_multiple(array_keys($purge_messages));
  }
}

/**
 * Find purgeable messages according to type and purge settings.
 *
 * @param $purge_limit
 *   The maximal amount of messages to fetch. Decremented each time messages
 *   are fetched.
 * @param $message_type_name
 *   Either a single message type name or an array of names.
 * @param $purge_settings
 *   Array containing purging settings: 'quota' and 'days'.
 *
 * @return array
 *   Messages of the given type(s) that should be purged according to the given
 *   settings.
 */
function message_get_purgeable_by_type(&$purge_limit, $message_type_name, $purge_settings) {
  if ($purge_limit <= 0) {
    return;
  }

  // Messages to be deleted.
  $purge_messages = array();

  // Base query for both purging methods.
  $base_query = new EntityFieldQuery();
  $base_query->entityCondition('entity_type', 'message', '=')
    ->propertyCondition('type', $message_type_name, is_array($message_type_name) ? 'IN' : '=')
    // Sort descending, the get the newest first.
    ->propertyOrderBy('timestamp', 'DESC')
    ->propertyOrderBy('mid', 'DESC');

  // Purge according to quota definition.
  if (!empty($purge_settings['quota'])) {
    $quota_query = clone $base_query;
    $result = $quota_query
      ->range($purge_settings['quota'], $purge_limit)
      ->execute();

    if (!empty($result['message'])) {
      $purge_limit -= count($result['message']);
      $purge_messages += $result['message'];
    }
  }

  // Purge according to maximal age definition.
  if (!empty($purge_settings['days'])) {
    $age_query = clone $base_query;
    // Find messages older than current time - maximal age in days times
    // the seconds per day.
    $earlier_than = time() - $purge_settings['days'] * 86400;
    $result = $age_query->propertyCondition('timestamp', $earlier_than, '<')
      ->range(0, $purge_limit)
      ->execute();

    if (!empty($result['message'])) {
      $purge_limit -= count($result['message']);
      $purge_messages += $result['message'];
    }
  }

  return $purge_messages;
}

/**
 * A class used for message types category.
 */
class MessageTypeCategory extends Entity {

  /**
   * The machine name of the message type category.
   *
   * @var string
   */
  public $category;

  /**
   * The human-redable name of the message type category.
   *
   * @var string
   */
  public $description = '';

  public function __construct($values = array()) {
    parent::__construct($values, 'message_type_category');
  }


}

/**
 * Creates a new message type category.
 *
 * If a message type category already exists, an exception will be thrown.
 *
 * @return MessageTypeCategory
 *   Returns a new message type category object.
 */
function message_type_category_create($category, $values = array()) {
  global $language;
  // Make sure the message type doesn't already exist, to prevent duplicate key
  // error.
  if (message_type_category($category)) {
    throw new Exception('Message type category' . check_plain($category) . ' already exists.');
  }
  $values['category'] = $category;
  $values += array(
    'language' => $language->language,
  );
  $return = entity_create('message_type_category', $values);

  return $return;
}

/**
 * Message type category loader.
 *
 * @param $name
 *   (optional) The name for this message type category. If no type is given all
 *   existing message types category are returned.
 *
 * @return MessageType
 *   Returns a fully-loaded message type category definition if a name is
 *   passed. Else an array containing all message types category is returned.
 */
function message_type_category_load($name = NULL) {
  // Replace dashes with underscores so this can be used as menu argument
  // loader too.
  $types = entity_load_multiple_by_name('message_type_category', isset($name) ? array(strtr($name, array('-' => '_'))) : FALSE);
  if (isset($name)) {
    return isset($types[$name]) ? $types[$name] : FALSE;
  }
  return $types;
}

/**
 * Inserts or updates a message type category object into the database.
 *
 * @param $message
 *   The message type category object to be inserted.
 *
 * @return
 *   Failure to write a record will return FALSE. Otherwise SAVED_NEW or
 *   SAVED_UPDATED is returned depending on the operation performed.
 */
function message_type_category_save($message) {
  return entity_save('message_type_category', $message);
}

/**
 * Deletes an existing message type category.
 *
 * @param $message
 *   The message type category object to be deleted.
 */
function message_type_category_delete($message) {
  return entity_delete('message_type_category', $message);
}


/**
 * A class used for message types.
 */
class MessageType extends Entity {

  /**
   * The machine name of the message type.
   *
   * @var string
   */
  public $name;

  /**
   * The human-redable name of the message type.
   *
   * @var string
   */
  public $description = '';

  /**
   * Array with the argument keys.
   *
   * This is used to allow creation of entity metadata properties based
   * on the argument keys.
   *
   * @see MessageMetadataController::entityPropertyInfo()
   *
   * @var array
   */
  public $argument_keys = array();

  /**
   * Array with the arguments and their replacement value, or callacbks.
   *
   * The argument keys will be replaced when rendering the message, and it
   * sohuld be prefixed by @, %, ! - similar to way it's done in Drupal
   * core's t() function.
   *
   * @code
   *
   * // Assuming out message-text is:
   * // %user-name created <a href="@node-url">@node-title</a>
   *
   * $message_type->arguments = array(
   *   // Hard code the argument.
   *   '%user-name' => 'foo',
   *
   *   // Use a callback, and provide callbacks arguments.
   *   // The following example will call Drupal core's url() function to
   *   // get the most up-to-date path of node ID 1.
   *   '@node-url' => array(
   *      'callback' => 'url',
   *      'callback arguments' => array('node/1'),
   *    ),
   *
   *   // Use callback, but instead of passing callback argument, we will
   *   // pass the Message entity itself.
   *   '@node-title' => array(
   *      'callback' => 'example_bar',
   *      'pass message' => TRUE,
   *    ),
   * );
   * @endcode
   *
   * Arguments assigned to message-type can be overriden by the ones
   * assigned to the message.
   *
   * @see message_get_property_values()
   *
   * @var array
   */
  public $argument = array();

  /**
   * Set the default message type category of the message type.
   *
   * @var string
   */
  public $category = 'message_type';

  /**
   * Serialized array with misc options.
   *
   * Purge settings (under $message_type->data['purge]). Note that the
   * purge settings can be added only to the message-type.
   * - 'enabled': TRUE or FALSE to explicetly enable or disable message
   *    purging. IF not set, the default purge settings defined in the
   *    "Message settings" will apply.
   * - 'quota': Optional; Maximal (approximate) amount of allowed messages
   *    of the message type. IF not set, the default purge settings defined in the
   *    "Message settings" will apply.
   * - 'days': Optional; Maximal message age in days. IF not set, the default purge settings defined in the
   *    "Message settings" will apply.
   *
   * Token settings:
   * - 'token replace': Indicate if message's text should be passed
   *    through token_replace(). defaults to TRUE.
   * - 'token options': Array with options to be passed to
   *    token_replace().
   *
   * Tokens settings assigned to message-type can be overriden by the ones
   * assigned to the message.
   *
   * @see message_get_property_values()
   *
   * @var array
   */
  public $data = array();

  public function __construct($values = array()) {
    parent::__construct($values, 'message_type');
  }

  /**
   * Retrieves the configured message text in a certain language.
   *
   * @param $langcode
   *   The language code of the Message text field, the text should be
   *   extracted from.
   * @param $options
   *   Array of options to pass to the metadata-wrapper:
   *   - 'field name': The name of the Message text field, text should be
   *     extracted from.
   *   - 'sanitize': Indicate if text should be escaped.
   *
   * @return
   *   A string with the text from the field, with all the tokens
   *   converted into their actual value.
   */
  public function getText($langcode = LANGUAGE_NONE, $options = array()) {
    // Set default values.
    $options += array(
      // As the text is already sanitized, it does not really matter if we
      // enable sanitizing, as it would be default. However, one can change the
      // field instance (e.g. to have no text processing) we make sure we still
      // properly sanitize the value.
      'sanitize' => TRUE,
      // The field name from which the text should be extracted.
      'field name' => MESSAGE_FIELD_MESSAGE_TEXT,
      // Determine if the text of just a single delta should be returned.
      'partials' => FALSE,
      'partial delta' => 0,
    );

    $property = entity_metadata_wrapper('message_type', $this);
    if (empty($property->$options['field name'])) {
      // Field doesn't exist.
      return;
    }
    // Let the metadata wrapper deal with the language.
    $property = $property->language($langcode)->$options['field name'];

    $delta = $options['partial delta'];
    if (!empty($options['partials']) && $delta >= $property->count()) {
      // Delta is bigger than the existing field, so return early, to
      // prevent an error.
      return;
    }

    if (!empty($options['partials'])) {
      // Get partial, not the whole text.
      $property_item = $this->getValue($property, $delta, $options);
      return $property_item->value($options);
    }
    elseif ($property instanceof EntityListWrapper) {
      // Multiple value field.
      $output = '';
      foreach (array_keys($property->value($options)) as $delta) {
        $property_item = $this->getValue($property, $delta, $options);
        $output .= $property_item->value($options);
      }
      return $output;
    }
    else {
      // Single value field.
      $property_item = $this->getValue($property, $delta, $options);
      return $property_item->value($options);
    }
  }

  public function save() {
    parent::save();
    // Clear the entity property info cache, as changed argument-keys result
    // in different entity property info.
    entity_property_info_cache_clear();
  }

  /**
   * Helper function to get the value from a property.
   *
   * If the property is of type 'text_formatted' get the processed text
   * value.
   *
   * @param $property
   *   The wrapped property object.
   * @param $delta
   *   The delta of the field.
   * @param $options
   *   Array of options that might be needed to get the field value.
   *
   * @return
   *   The wrapped property that can be used to get the text value of the
   *   field (i.e. safe-value or plain text).
   */
  protected function getValue($property, $delta, $options) {
    if ($property instanceof EntityStructureWrapper && isset($property->value) && $property->value($options)) {
      // Single value field.
      $property = $property->value;
    }
    elseif ($property instanceof EntityListWrapper && $property->get($delta)->value($options) && $property->get($delta) instanceof EntityStructureWrapper && isset($property->get($delta)->value)) {
      // Multiple value field.
      $property = $property->get($delta)->value;
    }
    return $property;
  }
}

/**
 * Creates a new message type.
 *
 * If a message type already exists, an exception will be thrown.
 *
 * @return MessageType
 *   Returns a new message type object.
 */
function message_type_create($name, $values = array()) {
  global $language;
  // Make sure the message type doesn't already exist, to prevent duplicate key
  // error.
  if (message_type_load($name)) {
    throw new Exception('Message type ' . check_plain($name) . ' already exists.');
  }
  $values['name'] = $name;
  $values += array(
    'language' => $language->language,
  );
  $return = entity_create('message_type', $values);

  return $return;
}

/**
 * Message type loader.
 *
 * @param $name
 *   (optional) The name for this message type. If no type is given all existing
 *   types are returned.
 *
 * @return MessageType
 *   Returns a fully-loaded message type definition if a type name is passed.
 *   Else an array containing all types is returned.
 */
function message_type_load($name = NULL) {
  // Replace dashes with underscores so this can be used as menu argument
  // loader too.
  $types = entity_load_multiple_by_name('message_type', isset($name) ? array(strtr($name, array('-' => '_'))) : FALSE);
  if (isset($name)) {
    return isset($types[$name]) ? $types[$name] : FALSE;
  }
  return $types;
}

/**
 * Inserts or updates a message object into the database.
 *
 * @param $message
 *   The message object to be inserted.
 *
 * @return
 *   Failure to write a record will return FALSE. Otherwise SAVED_NEW or
 *   SAVED_UPDATED is returned depending on the operation performed.
 */
function message_type_save($message) {
  return entity_save('message_type', $message);
}

/**
 * Deletes an existing message.
 *
 * @param $message
 *   The message object to be deleted.
 */
function message_type_delete($message) {
  return entity_delete('message_type', $message);
}

/**
 * A class used for messages.
 */
class Message extends Entity {

  /**
   * The message type category of the message.
   *
   * @var string
   */
  public $type;

  /**
   * The message timestamp.
   *
   * @var string
   */
  public $timestamp;

  /**
   * The message arguments.
   *
   * @see MessageType::arguments()
   *
   * @var array
   */
  public $arguments = array();

  /**
   * The message data array.
   *
   * @see MessageType::data()
   *
   * @var array
   */
  public $data = array();

  public function __construct($values = array()) {
    if (!isset($values['uid']) && isset($values['user'])) {
      $values['uid'] = $values['user']->uid;
      unset($values['user']);
    }
    if (isset($values['type']) && is_object($values['type'])) {
      $values['type'] = $values['type']->name;
    }

    parent::__construct($values, 'message');
    if (!isset($this->uid)) {
      $this->uid = $GLOBALS['user']->uid;
    }
    if (!isset($this->timestamp)) {
      $this->timestamp = time();
    }
  }

  /**
   * Returns the user associated with the message.
   */
  public function user() {
    return user_load($this->uid);
  }

  /**
   * Sets a new user associated with the message.
   *
   * @param $account
   *   The user account object or the user account id (uid).
   */
  public function setUser($account) {
    $this->uid = is_object($account) ? $account->uid : $account;
  }

  /**
   * Gets the associated message type.
   *
   * @return MessageType
   */
  public function getType() {
    return message_type_load($this->type);
  }

  /**
   * Generate an array for rendering the entity's content.
   *
   * @see entity_build_content()
   */
  public function buildContent($view_mode = 'full', $langcode = NULL) {
    $content['text'] = array(
      '#markup' => $this->getText($langcode),
    );
    return entity_get_controller($this->entityType)->buildContent($this, $view_mode, $langcode, $content);
  }

  /**
   * Replace arguments with their placeholders.
   *
   * @param $langcode
   *   Optional; The language to get the text in. If not set the current language
   *   will be used.
   * @param $options
   *   Optional; Array to be passed to MessageType::getText().
   */
  public function getText($langcode = LANGUAGE_NONE, $options = array()) {
    $message_type = $this->getType();

    if (!$message_type) {
      // Message type does not exist any more.
      return '';
    }

    $arguments = message_get_property_values($this, 'arguments');
    $output = $message_type->getText($langcode, $options);

    if (!empty($arguments)) {
      $args = array();
      foreach ($arguments as $key => $value) {
        if (is_array($value) && !empty($value['callback']) && function_exists($value['callback'])) {
          // A replacement via callback function.
          $value += array('pass message' => FALSE);
          if ($value['pass message']) {
            // Pass the message object as-well.
            $value['callback arguments'][] = $this;
          }

          $value = call_user_func_array($value['callback'], $value['callback arguments']);
        }

        switch ($key[0]) {
          case '@':
            // Escaped only.
            $args[$key] = check_plain($value);
            break;

          case '%':
          default:
            // Escaped and placeholder.
            $args[$key] = drupal_placeholder($value);
            break;

          case '!':
            // Pass-through.
            $args[$key] = $value;
        }
      }
      $output = strtr($output, $args);
    }
    $token_replace = message_get_property_values($this, 'data', 'token replace', TRUE);
    if ($output && $token_replace) {
      // Message isn't explicetly denying token replace, so process the text.
      $context = array('message' => $this);

      $token_options = message_get_property_values($this, 'data', 'token options');
      $output = token_replace($output, $context, $token_options);
    }
    return $output;
  }

  /**
   * Implements Entity::save().
   *
   * Auto create arguments based on syntax.
   *
   * If in one of the message text fields there is a token in the
   * following syntax @{message:user:name}, message will check if it is a
   * valid token, and if so, will create a new arguments, e.g.:
   *
   * @code
   *   $message->arguments['@{message:user:name}'] = 'foo';
   * @endcode
   *
   * Like this, it is possible to hardcode a token value, upon the message
   * creation, without the need to retrieve the token value each time the
   * message is displayed.
   *
   * This can be used for example, to hardcode the user's name, assuming
   * it will not change on the site.
   */
  public function save() {
    if (empty($this->is_new) || !empty($this->data['skip token hardcode'])) {
      // Message isn't new, or message explicetly doesn't want token
      // hardcoding
      parent::save();
      return;
    }

    $context = array('message' => $this);
    $token_options = !empty($this->data['token options']) ? $this->data['token options'] : array();

    $message_type = $this->getType();
    $wrapper = entity_metadata_wrapper('message_type', $message_type);

    // Iterate over the text fields.
    $tokens = array();
    foreach (field_info_instances('message_type', $message_type->category) as $instance) {
      $field_name = $instance['field_name'];
      $field = field_info_field($field_name);
      if (!in_array($field['type'], array('text', 'text_long'))) {
        // Not a text field.
        continue;
      }

      if (!$output = $message_type->getText(NULL, array('field name' => $field_name))) {
        // Field is empty.
        continue;
      }

      // Check for our hardcode syntax.
      $matches = array();
      preg_match_all('/[@|%|\!]\{([a-z0-9:_\-]+?)\}/i', $output, $matches);
      if (!$matches) {
        continue;
      }
      foreach ($matches[1] as $delta => $token) {
        $output = token_replace('[' . $token . ']', $context, $token_options);
        if ($output != '[' . $token . ']') {
          // Token was replaced.
          $argument = $matches[0][$delta];
          $tokens[$argument] = $output;
        }
      }
    }

    $this->arguments = array_merge($this->arguments, $tokens);
    parent::save();
  }
}

/**
 * Helper to easily create messages.
 *
 * @param $type
 *   The message type name.
 * @param $values
 *   Array with the following keys:
 *   - "arguments" - Array with arguments that should be replaced on run time in
 *     the message type.
 *   - "timestamp" - The unix timestamp of the creation time of the message. If
 *     empty the current time will be used.
 * @param $account
 *   Optional; The user object to associate the message with. If empty, the
 *   current user will be used.
 */
function message_create($type, $values = array(), $account = NULL) {
  global $language;
  if (empty($account)) {
    global $user;
    $account = clone $user;
  }
  $values['type'] = $type;
  $values['user'] = $account;
  $values += array(
    'language' => $language->language,
  );
  return entity_create('message', $values);
}

/**
 * Message load.
 *
 * @param $mid
 *   The message ID.
 * @return Message
 *   A message object.
 */
function message_load($mid) {
  $result = entity_load('message', array($mid));
  return $result ? reset($result) : FALSE;
}

/**
 * Loads multiple messages.
 *
 * @see entity_load().
 */
function message_load_multiple($mids, $conditions = array()) {
  return entity_load('message', $mids, $conditions);
}

/**
 * Message save.
 *
 * @param $message_instance
 *   A message instance object.
 * @return
 *   The saved message instance object.
 */
function message_save($message) {
  return entity_save('message', $message);
}

/**
 * Message delete.
 *
 * @param $iid
 *   Message instance IDs array.
 */
function message_delete_multiple($mids = array()) {
  entity_delete_multiple('message', $mids);
}

/**
 * Access callback for the message entity.
 */
function message_access($op, $entity, $account = NULL, $entity_type = 'message') {
  return user_access('create messages');
}

/**
 * Access callback for the message type entities.
 */
function message_type_access($op, $entity, $account, $entity_type) {
  return user_access('administer message types', $account);
}

/**
 * Entity property info getter callback for getting arguments.
 */
function message_property_get_argument($arguments, array $options, $name, $type, $context) {
  return isset($arguments[$context['message_replace_char'] . $name]) ? $arguments[$context['message_replace_char'] . $name] : NULL;
}

/**
 * Entity property info setter callback for arguments.
 */
function message_property_set_argument(&$arguments, $name, $value, $langcode, $type, $context) {
  $arguments[$context['message_replace_char'] . $name] = $value;
}

/**
 * Entity property info getter callback for getting the final message text.
 */
function message_property_get_text($message, array $options) {
  $langcode = isset($options['language']) ? $options['language']->language : LANGUAGE_NONE;
  return $message->getText($langcode);
}

/**
 * Get the values of a message property.
 *
 * The value of the message, after intersecting with the same values
 * from the message-type. For example, it is possible to assign
 * $message_type->arguments and $message->arguments. In case there are the
 * same keys in the array, the $message will override the ones from the
 * message-type.
 *
 * @param $message
 *   The message object.
 * @param $name
 *   The property name.
 * @param $key
 *   Optional; If the property is an array, the key to be used to get the
 *   value.
 * @param $default_value
 *   Optional; The default value to assign, if no value is given.
 *
 * @return
 *   The merged values, or if no value if found and empty array.
 */
function message_get_property_values(Message $message, $name, $key = NULL, $default_value = array()) {
  $message_type = $message->getType();

  if (isset($key)) {
    $type_value = isset($message_type->{$name}[$key]) ? $message_type->{$name}[$key] : array();
    $value = isset($message->{$name}[$key]) ? $message->{$name}[$key] : array();
  }
  else {
    $type_value = isset($message_type->{$name}) ? $message_type->{$name} : array();
    $value = isset($message->{$name}) ? $message->{$name} : array();
  }

  if (isset($value) && !is_array($value)) {
    // Value was found on the message.
    return $value;
  }
  elseif (isset($type_value) && !is_array($type_value)) {
    // Value was found on the message type.
    return $type_value;
  }
  elseif (!empty($value) || !empty($type_value)){
    // Value was found in one of the entities, and it's an array, so merge.
    return array_merge($type_value, $value);
  }

  // No value found, so return the default value.
  return $default_value;
}
