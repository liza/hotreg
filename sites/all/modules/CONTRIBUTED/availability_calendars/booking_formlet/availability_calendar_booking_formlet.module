<?php
/**
 * @file
 * Availability Calendar booking formlet module. This submdule of the
 * Availability Calendar module defines a field that shows a small booking form
 * that interacts with a calendar field. The form only has an arraival and
 * departure date field and a submit button that is supposed to post the values
 * to a webform where the visitor can enter its personal details and other
 * requested information.
 *
 * @author Erwin Derksen (http://drupal.org/user/750928)
 *
 * @todo:
 * - allow to disable booking form on a per node basis and an instance setting
 *   to disallow this.
 * - allow to overide the url on a per node basis.
 * - disable "Number of values" on field instance setting form.
 * - check the setting interactive on calendar fields when this fields get added
 * - can I reuse something from node reference or linkit module to select URL?
 * - what more information to send in hidden fields? field name, delta, language
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 * @link http://api.drupal.org/api/drupal/modules--field--field.api.php/function/hook_field_info/7
 *
 * Provides the descriptions of the fields offered by this module.
 */
function availability_calendar_booking_formlet_field_info() {
  return array(
    'availability_calendar_booking_formlet' => array(
      'label' => t('Availability Calendar Booking formlet'),
      'description' => t('Allows to show a booking formlet for entities with an availability calendar.'),
      'settings' => array(
        'define_per_language' => 0,
        'post_url' => array(LANGUAGE_NONE => ''),
        'booked_state' => '',
        //'allow_url_override' => FALSE,
      ),
      'instance_settings' => array(),
      'default_widget' => 'availability_calendar_booking_formlet',
      'default_formatter' => 'availability_calendar_booking_formlet',
  ),);
}

/**
 * Implements hook_field_settings_form().
 * @link http://api.drupal.org/api/drupal/modules--field_ui--field_ui.api.php/function/hook_field_settings_form/7
 */
function availability_calendar_booking_formlet_field_settings_form($field, $instance, $has_data) {
  module_load_include('inc', 'availability_calendar', 'availability_calendar');
  $settings = $field['settings'];
  $form = array();

  $form['define_per_language'] = array(
    '#type' => 'checkbox',
    '#title' => t('Define the URL to continue the booking per language'),
    '#description' => t("Webforms are not language aware. Check this option if you want to continue the booking with a different URL (webform) per language. If you change this setting, first save this page before filling in the next field(s)."),
    '#default_value' => $settings['define_per_language'],
    '#required' => FALSE,
    '#weight' => 10,
  );

  $form['post_url'] = array(
    '#type' => 'markup',
    '#tree' => TRUE,
    '#weight' => 11,
  );
  if ($settings['define_per_language']) {
    $form['post_url'] += array(
      '#theme' => 'table',
      '#pre_render' => array('availability_calendar_booking_formlet_field_settings_form_pre_render'),
      '#attributes' => array('id' => 'state-list'),
      '#caption' => t('URL to continue the booking'),
      '#suffix' => t('These typically point to a webform.') . ' ' . t("Do not start internal URL's with a '/'. You can use the system URL, it wil be replaced by its alias. See the help for more instructions about setting up the target page or webform."),
    );
    $language_list = function_exists('locale_language_list') ? locale_language_list() : array_combine(array_keys($settings['post_url']), array_keys($settings['post_url']));
    foreach ($language_list as $language_code => $language_name) {
      $form['post_url'][$language_code] = array(array(
        '#type' => 'textfield',
        '#title' => $language_name,
        '#default_value' => isset($settings['post_url'][$language_code]) ? $settings['post_url'][$language_code] : $settings['post_url'][LANGUAGE_NONE],
        '#required' => FALSE,
      ));
    }
  }
  else {
    $form['post_url'][LANGUAGE_NONE] = array(
      '#type' => 'textfield',
      '#title' => t('URL to continue the booking'),
      '#description' => t('This typically points to a webform.') . ' ' . t("Do not start internal URL's with a '/'. You can use the system URL, it wil be replaced by its alias. See the help for more instructions about setting up the target page or webform."),
      '#default_value' => isset($settings['post_url'][LANGUAGE_NONE]) ? $settings['post_url'][LANGUAGE_NONE] : (is_array($settings['post_url']) ? reset($settings['post_url']) : ''),
      '#required' => FALSE,
    );
  }
  $form['booked_state'] = array(
    '#type' => 'select',
    '#title' => t('Change state to'),
    '#description' => t("The state to change the calendar to after the user has selected the arrival and departure dates. Note that the state is only visually changed in the browser, not stored."),
    '#default_value' => $settings['booked_state'],
    '#options' => availability_calendar_get_states('label'),
    '#required' => TRUE,
    '#weight' => 12,
  );

  return $form;
}

/**
 * Use of tables in a form.
 *
 * The children of the elements are the rows.
 * The children of the children are the cells.
 *
 * @param array element
 *   Form element that will be themed as a table.
 * @return array
 *   The changed form element.
 */
function availability_calendar_booking_formlet_field_settings_form_pre_render($element) {
  $rows = array();
  foreach (element_children($element) as $row_key) {
    $row = array();
    foreach (element_children($element[$row_key]) as $cell_key) {
      $row[$cell_key] = array('data' => $element[$row_key][$cell_key]);
    }
    $rows[$row_key] = array('data' => $row);
    unset($element[$row_key]);
  }
  $element['#rows'] = $rows;
  return $element;
}

/**
 * Implements hook_field_instance_settings_form().
 * @link http://api.drupal.org/api/drupal/modules--field_ui--field_ui.api.php/function/hook_field_instance_settings_form/7
 */
function availability_calendar_booking_formlet_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $form = array();
  return $form;
}

/**
 * Implements hook_field_is_empty().
 * @link http://api.drupal.org/api/drupal/modules--field--field.api.php/function/hook_field_is_empty/7
 *
 * A booking formlet is always considered empty, it is a display only field.
 */
function availability_calendar_booking_formlet_field_is_empty($item, $field) {
  return TRUE;
}

/**
 * Implements hook_field_validate().
 * @link http://api.drupal.org/api/drupal/modules--field--field.api.php/function/hook_field_validate/7
 *
 * Verifies that the booking formlet is valid. The booking fomrlet is a display
 * only field and thus does not need to be validated.
 */
function availability_calendar_booking_formlet_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
}


/**************************************************************************
 * Field Type API: Widget
 *
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 **************************************************************************/

/**
 * Implements hook_field_widget_info.
 * @link http://api.drupal.org/api/drupal/modules--field--field.api.php/function/hook_field_widget_info/7
 *
 * For now, this module defines 1 widget. Other widgets may be defined in the
 * future or by other modules.
 */
function availability_calendar_booking_formlet_field_widget_info() {
  return array(
    'availability_calendar_booking_formlet' => array(
      'label' => t('- None -'),
      'description' => '',
      'field types' => array('availability_calendar_booking_formlet'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
  ),),);
}

/**
 * Implements hook_field_widget_settings_form
 * @link http://api.drupal.org/api/drupal/modules--field_ui--field_ui.api.php/function/hook_field_widget_settings_form/7
 */
function availability_calendar_booking_formlet_field_widget_settings_form($field, $instance) {
  $form = array();
  return $form;
}

/**
 * Implements hook_field_widget_form().
 * @link http://api.drupal.org/api/drupal/modules--field--field.api.php/function/hook_field_widget_form/7
 */
function availability_calendar_booking_formlet_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['#access'] = FALSE;
  return $element;
}


/******************************************************************************
 *  Field Type API: Formatter
 *
 *  These are the api hooks that present formatted (themed) output to the user.
 *****************************************************************************/

/**
 * Implements hook_field_formatter_info().
 * @link http://api.drupal.org/api/drupal/modules--field--field.api.php/function/hook_field_formatter_info/7
 *
 */
function availability_calendar_booking_formlet_field_formatter_info() {
  return array(
    'availability_calendar_booking_formlet' => array(
      'label' => t('Show booking formlet'),
      'field types' => array('availability_calendar_booking_formlet'),
      'settings' => array(),
  ),);
}

/**
 * Implements hook_field_formatter_view().
 * @link http://api.drupal.org/api/drupal/modules--field--field.api.php/function/hook_field_formatter_view/7
 */
function availability_calendar_booking_formlet_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, &$items, $display) {
  // Only show the booking formlet if there's at least 1 enabled calendar.
  $cids = array();
  $field_instance_info = field_info_instances($entity_type, $instance['bundle']);
  foreach ($field_instance_info as $field_name => $field_instance) {
    $field_info = field_info_field_by_id($field_instance['field_id']);
    if ($field_info['type'] === 'availability_calendar') {
      $calendar_field_items = field_get_items($entity_type, $entity, $field_name, $langcode);
      if ($calendar_field_items !== FALSE) {
        foreach ($calendar_field_items as $delta => $calendar_field_item) {
          if (isset($calendar_field_item['enabled']) && $calendar_field_item['enabled'] && !empty($calendar_field_item['cid'])) {
            $cids[] = $calendar_field_item['cid'];
          }
        }
      }
    }
  }
  $element = array();
  if (count($cids) > 0) {
    $settings = $display['settings'] + $instance['settings'] + $field['settings'];
    // $items will be empty because this is a display only field: fake 1 item.
    $delta = 0;
    $items[$delta] = array();
    $element[$delta] = drupal_get_form('availability_calendar_booking_formlet_form', $entity_type, $entity, $settings, $cids);
  }
  return $element;
}

function availability_calendar_booking_formlet_form($form_id, $form_state) {
  static $formlet_count = 0;

  $formlet_count++;
  $entity_type = $form_state['build_info']['args'][0];
  $entity = $form_state['build_info']['args'][1];
  $entity_id = entity_extract_ids($entity_type, $entity);
  $entity_id = $entity_id[0];
  $entity_label = entity_label($entity_type, $entity);
  $settings = $form_state['build_info']['args'][2];
  $cids = $form_state['build_info']['args'][3];
  $form = array();

  $form['#id'] = "availability-calendar-booking-formlet-form-$formlet_count";
  $form['cid'] = array(
    '#type' => 'hidden',
    '#value' => 0,  // Cid will be assigned a value in the browser.
  );
  $form['calendar_label'] = array(
    '#type' => 'hidden',
    '#value' => '',  // Calendar_label will be assigned a value in the browser.
  );
  $form['entity_type'] = array(
    '#type' => 'hidden',
    '#value' => $entity_type,
  );
  $form['entity_id'] = array(
    '#type' => 'hidden',
    '#value' => $entity_id,
  );
  $form['entity_label'] = array(
    '#type' => 'hidden',
    '#value' => $entity_label,
  );

  $id = drupal_html_id('acbf-reset-from');
  $form['arrival'] = array(
    '#type' => 'textfield',
    '#title' => t('Arrival date'),
    '#default_value' => '',
    '#required' => TRUE,
    '#disabled' => TRUE,
    '#attributes' => array('class' => array('acbf-arrival'), 'readonly' => 'readonly'),
    '#prefix' => '<div class="acbf-date">',
    '#suffix' => '<input id="' . $id . '" class="acbf-reset-from form-reset" type="reset" value="' . t('Clear selected arrival date') . '" /></div>',
    '#weight' => 2,
  );

  $id = drupal_html_id('acbf-reset-both');
  $form['departure'] = array(
    '#type' => 'textfield',
    '#title' => t('Departure date'),
    '#default_value' => '',
    '#required' => TRUE,
    '#disabled' => TRUE,
    '#attributes' => array('class' => array('acbf-departure'), 'readonly' => 'readonly'),
    '#prefix' => '<div class="acbf-date">',
    '#suffix' => '<input id="' . $id . '" class="acbf-reset-both form-reset" type="reset" value="' . t('Clear selected dates') . '" /></div>',
    '#weight' => 4,
  );

  // Add form submit button.
  $form['actions'] = array(
    '#type' => 'actions',
    '#weight' => 10,
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Book this resource ...'),
  		'#disabled' => TRUE,
    ),
  );

  global $language;
  $post_url = '';
  if ($settings['define_per_language'] && isset($settings['post_url'][$language->language])) {
    $post_url = $settings['post_url'][$language->language];
  }
  else if (isset($settings['post_url'][LANGUAGE_NONE])) {
    $post_url = $settings['post_url'][LANGUAGE_NONE];
  }
  else if (is_array($settings['post_url'])) {
    $post_url = reset($settings['post_url']);
  }
  if (is_array($post_url)) {
    $post_url = reset($post_url);
  }
  $form['#action'] = url($post_url);
  $form['#method'] = 'POST';

  drupal_add_js(drupal_get_path('module', 'availability_calendar_booking_formlet') .'/availability_calendar_booking_formlet.js',
    array('type' => 'file')
  );
  $cids = implode(',', $cids);
  drupal_add_js("Drupal.behaviors.availabilityCalendarBookingFormlet$formlet_count = {
      attach: function(context, settings) {
        Drupal.availabilityCalendar.bookingFormlet$formlet_count = new Drupal.availabilityCalendar.BookingFormlet([$cids], {$settings['booked_state']}, '#{$form['#id']}');
      }
    };",
    array('type' => 'inline', 'scope' => 'footer')
  );
  $form['#attached']['css'] = array(drupal_get_path('module', 'availability_calendar_booking_formlet') . '/availability_calendar_booking_formlet.css');

  return $form;
}
